/**
 * This file is generated by jsonrpcstub, DO NOT CHANGE IT MANUALLY!
 */

#ifndef JSONRPC_CPP_STUB_ABSTRACTAPI_H_
#define JSONRPC_CPP_STUB_ABSTRACTAPI_H_

#include <jsonrpccpp/server.h>

class AbstractApi : public jsonrpc::AbstractServer<AbstractApi>
{
    public:
        AbstractApi(jsonrpc::AbstractServerConnector &conn, jsonrpc::serverVersion_t type = jsonrpc::JSONRPC_SERVER_V2) : jsonrpc::AbstractServer<AbstractApi>(conn, type)
        {
            this->bindAndAddMethod(jsonrpc::Procedure("loadStateMachine", jsonrpc::PARAMS_BY_NAME, jsonrpc::JSON_BOOLEAN, "stateMachine",jsonrpc::JSON_STRING, NULL), &AbstractApi::loadStateMachineI);
            this->bindAndAddMethod(jsonrpc::Procedure("UnloadStateMachine", jsonrpc::PARAMS_BY_NAME, jsonrpc::JSON_BOOLEAN,  NULL), &AbstractApi::UnloadStateMachineI);
            this->bindAndAddMethod(jsonrpc::Procedure("StartStateMachine", jsonrpc::PARAMS_BY_NAME, jsonrpc::JSON_BOOLEAN,  NULL), &AbstractApi::StartStateMachineI);
            this->bindAndAddMethod(jsonrpc::Procedure("StopStateMachine", jsonrpc::PARAMS_BY_NAME, jsonrpc::JSON_BOOLEAN,  NULL), &AbstractApi::StopStateMachineI);
            this->bindAndAddMethod(jsonrpc::Procedure("postEvent", jsonrpc::PARAMS_BY_NAME, jsonrpc::JSON_BOOLEAN, "event",jsonrpc::JSON_STRING,"message",jsonrpc::JSON_STRING,"origin",jsonrpc::JSON_STRING, NULL), &AbstractApi::postEventI);
        }

        inline virtual void loadStateMachineI(const Json::Value &request, Json::Value &response)
        {
            response = this->loadStateMachine(request["stateMachine"].asString());
        }
        inline virtual void UnloadStateMachineI(const Json::Value &request, Json::Value &response)
        {
            (void)request;
            response = this->UnloadStateMachine();
        }
        inline virtual void StartStateMachineI(const Json::Value &request, Json::Value &response)
        {
            (void)request;
            response = this->StartStateMachine();
        }
        inline virtual void StopStateMachineI(const Json::Value &request, Json::Value &response)
        {
            (void)request;
            response = this->StopStateMachine();
        }
        inline virtual void postEventI(const Json::Value &request, Json::Value &response)
        {
            response = this->postEvent(request["event"].asString(), request["message"].asString(), request["origin"].asString());
        }
        virtual bool loadStateMachine(const std::string& stateMachine) = 0;
        virtual bool UnloadStateMachine() = 0;
        virtual bool StartStateMachine() = 0;
        virtual bool StopStateMachine() = 0;
        virtual bool postEvent(const std::string& event, const std::string& message, const std::string& origin) = 0;
};

#endif //JSONRPC_CPP_STUB_ABSTRACTAPI_H_
